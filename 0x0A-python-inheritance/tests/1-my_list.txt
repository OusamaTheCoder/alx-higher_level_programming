Test Cases for the `MyList` class in the `1-my_list` module
===========================================================

Using `MyList`:
---------------------

Import the `MyList` class from the module:

    >>> MyList = __import__('1-my_list').MyList


Correct Class Type Test:

    >>> ml = MyList()
    >>> type(ml) == MyList
    True


Correct Instance Test:

    >>> ml = MyList()
    >>> isinstance(ml, list)
    True


`print_sorted` Method is an Instance Method:

    >>> type(MyList.__dict__['print_sorted'])
    <class 'function'>


`print_sorted` Method Called via Class with No Arguments:

    >>> MyList.print_sorted()
    Traceback (most recent call last):
      ...
    TypeError: print_sorted() missing 1 required positional argument: 'self'


`print_sorted` Method Called with 1 Argument:

    >>> ml.print_sorted([4, 2, 5])
    Traceback (most recent call last):
      ...
    TypeError: print_sorted() takes 1 positional argument but 2 were given


`print_sorted` Method Called with 2 Arguments:

    >>> ml.print_sorted([4, 2, 5], 1)
    Traceback (most recent call last):
      ...
    TypeError: print_sorted() takes 1 positional argument but 3 were given


Empty List Test:

    >>> ml = MyList()
    >>> ml.print_sorted()
    []


Normal List Test:

    >>> ml = MyList([2, 10, 1])
    >>> ml.print_sorted()
    [1, 2, 10]


Normal List Test 2:

    >>> ml = MyList([1, 4, 2, 3, 5])
    >>> ml.print_sorted()
    [1, 2, 3, 4, 5]


Negative Integers List Test:

    >>> ml = MyList([-1000, -98, -232565, 0, -23423434, -123])
    >>> ml.print_sorted()
    [-23423434, -232565, -1000, -123, -98, 0]


Original List Unchanged:

    >>> ml = MyList([2, 10, 1, -10, 20, 100, 0])
    >>> ml.print_sorted()
    [-10, 0, 1, 2, 10, 20, 100]
    >>> ml
    [2, 10, 1, -10, 20, 100, 0]


List Already in Order:

    >>> ml = MyList([-10, 0, 1, 2, 10, 20, 100])
    >>> ml.print_sorted()
    [-10, 0, 1, 2, 10, 20, 100]


Test Append:

    >>> ml = MyList()
    >>> ml.append(10)
    >>> ml
    [10]
